- GRUB2 :  리눅스의 bootloader, 즉 커널을 메모리로 로딩하는 역할을 함.  멀티부팅에도 사용됨.

1. root 패스워드 분실시 패스워드 변경하고 로그인하기

single 모드로 진입 : grub 메뉴에서 커널에 커서 위하고 'e'키 입력 후 linux16으로 시작하는 라인에서
                     quiet 뒤에 init=/bin/bash

#mount -o remount,rw /

#getenforce  => 입력시 Enforcing 이 출력되면 다음과 같이 SELinux 기능 비활성화함.

#vi /etc/selinux/config
SELINUX=enforcing
SELINUX=disabled 로 수정 후 저장.

#LANG=en_US.UTF-8
#passwd    => root 패스워드 변경

#touch /.autorelabel

저장하고 리부팅 후 바뀐 root 암호로 로그인되는지 확인.


2. grub에 패스워드 설정하기

#grub2-mkpasswd-pbkdf2

grub.pbkdf2.sha512.10000.BF7AE4D969BAB56071863A2D42505D74E665E300EE5A7D3957882EE9D718E77FC1FE1539016AADFB165BEFB52CADA4D938E15A161AF2709BDF608DCB67254E1F.9D83643527E8699A8480F279A5614B2719088A1FFF64D407F74A8C691EDBC05962DB4B1CBDEE9F135D2D9E5CFCF7FFC10485C8C6B7BA620395D2DE1B92611079

vi /etc/grub.d/40_custom

set superusers="root"
password_pbkdf2 root grub.pbkdf2.sha512.10000.BF7AE4D969BAB56071863A2D42505D74E665E300EE5A7D3957882EE9D718E77FC1FE1539016AADFB165BEFB52CADA4D938E15A161AF2709BDF608DCB67254E1F.9D83643527E8699A8480F279A5614B2719088A1FFF64D407F74A8C691EDBC05962DB4B1CBDEE9F135D2D9E5CFCF7FFC10485C8C6B7BA620395D2DE1B92611079
저장

바뀐 grub 설정 적용

#cp 40_custom 40_custom.bak

#grub2-mkconfig -o /boot/grub2/grub.cfg

#cat /boot/grub2/grub.cfg

reboot 하고 grub2 메뉴 화면에서 e키를 누르면 username을 물어봄.

>> awk - 표형식의 데이터에서 원하는 레코드와 필드값을 추출할 수 있는 명령어

awk '{print}' awk-sample.txt
awk -F : '{print $1, $3}' /etc/passwd
awk '{print $1, $8}' awk-sample.txt
awk '{printf "%-25s %4d %2s\n",$9,$6,$7}' awk-sample2.txt
df -h | grep  -v '^/dev' | awk '{print $1,$5}'

 df -h | grep  -v '^/dev' | awk '$5 >= 1  {print $1,$5}'

ls -l | awk '!(/root/) {print}'  // 소유자나 그룹이 root가 아닌 파일 출력

>> sed - 스트림편집기. 찾은 문자열을 바꿀 수 있음.

cat /etc/ssh/sshd_config | grep '^#PermitRoot'

sed 's/#PermitRoot/PermitRoot/' /etc/ssh/sshd_config | grep '^PermitRoot'

172.31.0.10	rocky1

sed 's/testsvr/TESTSVR/' hosts
sed -n 's/testsvr/TESTSVR/p' hosts    => 변경된 라인만 출력. 변경되지는 않음.
cat hosts
sed -i 's/testsvr/TESTSVR/' hosts       => 변경사항을 파일에 반영함.
cat hosts
sed -i 's/TESTSVR/testsvr/' hosts
cat hosts
sed -ic 's/testsvr/TESTSVR/' hosts
ls
cat hosts

클라이언트-------------------------> 웹서버-------->  WAS(Web Application Server) -----------> DB
index.html                                 ---------------------------------------------
                                                    서버사이드
                                             
                                           Apache,Nginx        Tomcat
                                                (html)

 웹브라우저<---------------------- index.html

  test.jsp    ----------------------->  test.jsp -> tomcat
  test.php                                            <- html
  test.asp                                                php module(웹서버에 모듈로 추가), php-fpm(별도의 WAS구성 가능)
  test.do                                             <- html

<?php phpinfo() ?>

APM(Apache PHP Mysql)

< Rocky8에 Apache와 Tomcat을 각각 설치하여 연동하기>

>>Tomcat 설치하기

- centos 저장소 추가 및 업데이트
 
#dnf -y install epel-release
#dnf -y update 


- Java 설치하기 (openjdk), oracle, amazon(corretto)

#dnf install java-11-openjdk-devel
>> 우분투의 경우 다음과 같이 설치
#apt install openjdk-11-jdk	openjdk-17-jdk

#java -version

- Tomcat 설치하기

#useradd -r tomcat     => -r 시스템 계정으로 생성 

#wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.tar.gz

#tar xf apache-tomcat-9.0.98.tar.gz -C /usr/local

#cd /usr/local

#mv apache-tomcat-9.0.98 tomcat

- 소유권 변경 (tomcat)
#pwd
/usr/local
#chown -R tomcat.tomcat tomcat

- tomcat 환경변수 설정

# echo "export CATALINA_HOME="/usr/local/tomcat"" >> ~/.bash_profile
# source ~/.bash_profile

- tomcat 설정파일(server.xml) 
다음과 같이 수정한다. 
vi /usr/local/tomcat/conf/server.xml
    124     <!-- Define an AJP 1.3 Connector on port 8009 -->
    125
    126     <Connector protocol="AJP/1.3"
    127                address="0.0.0.0"
    128                port="8009"
    129                redirectPort="8443"
    130                secretRequired="false"/> 



- systemd service 생성 및 설정

# vi /etc/systemd/system/tomcat.service

[Unit]
Description=Apache Tomcat Server
After=syslog.target network.target

[Service]
Type=forking
User=tomcat
Group=tomcat

Environment=CATALINA_PID=/usr/local/tomcat/temp/tomcat.pid
Environment=CATALINA_HOME=/usr/local/tomcat
Environment=CATALINA_BASE=/usr/local/tomcat

ExecStart=/usr/local/tomcat/bin/catalina.sh start
ExecStop=/usr/local/tomcat/bin/catalina.sh stop

RestartSec=10
Restart=always
[Install]
WantedBy=multi-user.target

저장

#systemctl daemon-reload

#systemctl start tomcat
#systemctl enable tomcat
#systemctl status tomcat

#/usr/local/tomcat/bin/version.sh


- 방화벽 개방

#firewall-cmd --permanent --add-port=8080/tcp   => 테스트 후 포트 차단.  Apache에서 들어오는 포트는 8009임.
#firewall-cmd --permanent --add-port=8009/tcp
#firewall-cmd --reload

- 외부 브라우저에서 http://x.x.x.x:8080 접속

-- test_svr(192.168.80.200)에 설치

>> Apache / JK connector 설치하기

- Apache 설치
#dnf install httpd

- mod_jk 컴파일

mod_jk 란?
Apache와 Tomcat을 연동하기 위한 모듈이다. AJP 프로토콜을 이용하여 아파치로 들어온 요청을 톰캣에 전달하여
처리한다. 아파치로 들어온 요청을 톰캣으로 전달 할때 AJP 포트 (기본 8009)를 사용하며 필요에 의한 포트 변경도
가능하다.

# dnf install -y autoconf libtool httpd-devel
# dnf install redhat-rpm-config -y => tomcat-connector make할 때 필요

- mod_jk 다운로드 및 압축/Tar 해제

# cd /work
# wget https://dlcdn.apache.org/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.50-src.tar.gz --no-check-certificate
# tar xf tomcat-connectors-1.2.50-src.tar.gz
# cd tomcat-connectors-1.2.50-src/native

- mod_jk 컴파일 설치
# ./buildconf.sh
# ./configure --with-apxs=/bin/apxs
# make
# make install

- 설치확인

# ls -l /usr/lib64/httpd/modules/mod_jk.so

# cd /etc/httpd/conf.d/

# vi workers.properties
worker.list=tomcat1
worker.tomcat1.type=ajp13
worker.tomcat1.host=192.168.80.112 (본인 IP입력)
worker.tomcat1.port=8009
worker.tomcat1.lbfactor=1    => tomcat이 2대 이상일 경우 로드밸런싱 비율

# vi mod_jk.conf
LoadModule jk_module modules/mod_jk.so

JkMount /*.jsp tomcat1
JkMount /*.json tomcat1
JkMount /*.xml tomcat1
JkMount /*.do tomcat1

<ifModule jk_module>
        JkWorkersFile conf.d/workers.properties

        JkShmFile logs/mod_jk.shm
        JkLogFile logs/mod_jk.log

        JkLogLevel error
        JkLogStampFormat "[%a %b %d %H:%M:%S %Y]"
</ifModule>


- Apache 서비스 시작 및 활성화

# systemctl start httpd
# systemctl enable httpd

- 방화벽 개방

# firewall-cmd --permanent --add-service=http
# firewall-cmd --reload

- 접속 테스트

http://192.168.80.200/(웹서버) 로 접속하면 웹서버의 index.html(기본페이지) 출력
http://192.168.80.200/index.jsp 로 접속하면 Tomcat 기본 페이지 출력   => Apache가 .jsp 요청일 경우 Tomcat으로 전달한다.

- tomcat menu 접속하기
vi conf/tomcat-users.xml
  <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <role rolename="manager-status"/>
  <role rolename="admin-gui"/>
  <user username="admin" password="admin" roles="manager-gui,manager-script,manager-status,admin-gui"/>

vi webapps/manager/META-INF/context.xml
  <Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|192\.168\.200\.\d+" />


- Mariadb 연동

4) mysql connector 다운로드 및 복사
wget https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-8.0.29.tar.gz
tar xf  mysql-connector-~~
cd mysql-connector-~~
cp mysql-connector~~~.jar  /usr/local/tomcat/lib

<Wordpress 설치>
Apache-PHP-Mysql(APM)

dnf install -y php-mysqlnd php-fpm mariadb-server httpd tar curl php-json

systemctl start httpd mariadb
firewall-cmd --permanent --add-service=http
firewall-cmd --reload

mysql -u root -p
CREATE DATABASE wordpress; 
CREATE USER `admin`@`localhost` IDENTIFIED BY 'pass'; 
GRANT ALL ON wordpress.* TO `admin`@`localhost`; 
FLUSH PRIVILEGES; 
exit

wget https://wordpress.org/latest.tar.gz
mv latest.tar.gz wordpress.tar.gz
tar xf wordpress.tar.gz
mv wordpress /var/www/html/wp
chown -R apache:apache /var/www/html/wp

브라우저에서 http://서버IP주소/wp 접속후 설치 진행

데이터베이스 이름		wordpress
데이터베이스 유저		wpuser
데이터베이스 유저 비밀번호	1234
호스트			localhost

Docker
1. 아파치 웹서버 container 생성하고 실행하기
#docker pull httpd			-> 컨테이너 이미지 다운로드
#docker create httpd		-> 컨테이너 이미지를 이용해 컨테이너 생성
#docker start 컨테이너ID 또는 컨테이너명 -> 컨테이너 시작
#docker attach 컨테이너ID 또는 컨테이너명 ->컨테이너 접속
#docker container inspect 컨테이너ID 또는 컨테이너명 -> 컨테이너 정보 출력

2. nginx 웹서버 container 생성하고 실행하기
#docker run nginx -> 컨테이너 이미지가 없으면 다운로드하고, 컨테이너 이미지를 이용해 컨테이너 생성하고, 생성된 컨테이너에 접속

3. tomcat9 서버 container 생성하고 실행하기
#docker run -d --name tomcat -p 8080:8080 -v /home/admin/webapps/usr/local/webapps tomcat:9
                                          ----------------
                                           포트포워딩 : 외부에서 접근가능하도록 설정

4. tomcat 컨테이너의 /usr/local/tomcat/webapps/ROOT 디렉토리에 index.jsp 복사하기
#echo "<h1> Hello, Tomcat </h1>" > index.jsp
#docker cp index.jsp tomcat/usr/local/tomcat/webapps/ROOT 

5. mariadb 컨테이너 생성하고 실행하기
#docker run -d --name mariadb -p 3306:3306 -e MARIADB_ROOT_PASSWORD=1234 mariadb
#docker start mariadb
#docker exec -it mariadb bash
root@7ebb7f6a77be:/# mariadb -uroot -p

- 도커 컨테이너를 이용해 Tomcat 설치

1) tomcat9.0 이미지 다운로드
docker pull tomcat:9.0

2) 컨테이너 생성
docker run -it -d --name tomcat --hostname tomcat -p 8080:8080 -v /work/webapps:/usr/local/tomcat/webapps tomcat:9.0

3) tomcat 동작 테스트
cd /work/webapps
mkdir ROOT
cd ROOT
vi test.jsp

웹브라우저
http://192.168.80.XXX:8080/test.jsp

4) mysql connector 다운로드 및 복사
wget https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-8.0.29.tar.gz
tar xf  mysql-connector-~~
cd mysql-connector-~~
docker cp mysql-connector~~~.jar  tomcat:/usr/local/tomcat/lib

mkdir -p /work/webapps/ROOT/WEB-INF/lib
docker cp mysql-connector~~~.jar  tomcat:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib

5) 아파치 웹 서버 컨테이너 생성
docker pull httpd
docker run -itd  --name apache --hostname apache -v /work/web:/usr/local/apache2/htdocs -p 80:80 ubuntu:20.04
> 또는 # docker run -d --name apache -p 8080:8080 -v /home/admin/html/var/www/html httpd
cd /work/web

docker exec -it apache bash
apache# apt update -y
apache# apt install apache2 -y
apache# apt install vim net-tools 
apache# apt install libapache2-mod-jk
apache# apt install apt-utils

cd /etc/apache2
vi workers.properties
worker.list=tomcat1
worker.tomcat1.type=ajp13
worker.tomcat1.host=172.17.0.3
worker.tomcat1.port=8009
worker.tomcat1.lbfactor=1 
저장
cd /etc/libapache2/mods-available
cp httpd-jk.conf jk.conf
vi jk.conf
#    JkWorkersFile /etc/libapache2-mod-jk/workers.properties
수정 =>    JkWorkersFile /etc/apache2/workers.properties
ln -f -s jk.conf /etc/apache2/mods-available/jk.conf
a2dismod jk
a2enmod jk

cd /etc/apache2/sites-available
vi 000-default.conf
mv jk.conf /etc/apache2/mods-available/
